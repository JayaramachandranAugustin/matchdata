/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whizpath.matchstream.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Match Value */
@org.apache.avro.specific.AvroGenerated
public class MatchScore extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1381282549017877366L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MatchScore\",\"namespace\":\"com.whizpath.matchstream.generated\",\"doc\":\"Match Value\",\"fields\":[{\"name\":\"matchId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"matchType\",\"type\":{\"type\":\"enum\",\"name\":\"MatchType\",\"symbols\":[\"INTERNATIONAL_FRIENDLY\",\"INTERNATIONAL\",\"CLUB_FRIENDLY\",\"CLUB\"]}},{\"name\":\"matchAttendance\",\"type\":\"long\"},{\"name\":\"groundName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"venueCity\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"venueState\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"venueCountry\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"matchDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"result\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstHalfExtraTime\",\"type\":\"int\"},{\"name\":\"secondHalfExtraTime\",\"type\":\"int\"},{\"name\":\"Teams\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Team\",\"fields\":[{\"name\":\"teamName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teamId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teamGoal\",\"type\":\"int\"},{\"name\":\"isHome\",\"type\":\"boolean\"},{\"name\":\"yellowCardCount\",\"type\":\"int\"},{\"name\":\"redCardCount\",\"type\":\"int\"}]}}},{\"name\":\"Players\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Player\",\"fields\":[{\"name\":\"playerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"playerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"goalCount\",\"type\":\"int\"},{\"name\":\"assistCount\",\"type\":\"int\"},{\"name\":\"keypass\",\"type\":\"int\"},{\"name\":\"dribble\",\"type\":\"int\"},{\"name\":\"tackle\",\"type\":\"int\"},{\"name\":\"teamName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"outTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"yellowCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"secondYellowCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"redCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MatchScore> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MatchScore> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MatchScore> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MatchScore> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MatchScore> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MatchScore to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MatchScore from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MatchScore instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MatchScore fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String matchId;
  private com.whizpath.matchstream.generated.MatchType matchType;
  private long matchAttendance;
  private java.lang.String groundName;
  private java.lang.String venueCity;
  private java.lang.String venueState;
  private java.lang.String venueCountry;
  private java.lang.String matchDateTime;
  private java.lang.String result;
  private int firstHalfExtraTime;
  private int secondHalfExtraTime;
  private java.util.List<com.whizpath.matchstream.generated.Team> Teams;
  private java.util.List<com.whizpath.matchstream.generated.Player> Players;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MatchScore() {}

  /**
   * All-args constructor.
   * @param matchId The new value for matchId
   * @param matchType The new value for matchType
   * @param matchAttendance The new value for matchAttendance
   * @param groundName The new value for groundName
   * @param venueCity The new value for venueCity
   * @param venueState The new value for venueState
   * @param venueCountry The new value for venueCountry
   * @param matchDateTime The new value for matchDateTime
   * @param result The new value for result
   * @param firstHalfExtraTime The new value for firstHalfExtraTime
   * @param secondHalfExtraTime The new value for secondHalfExtraTime
   * @param Teams The new value for Teams
   * @param Players The new value for Players
   */
  public MatchScore(java.lang.String matchId, com.whizpath.matchstream.generated.MatchType matchType, java.lang.Long matchAttendance, java.lang.String groundName, java.lang.String venueCity, java.lang.String venueState, java.lang.String venueCountry, java.lang.String matchDateTime, java.lang.String result, java.lang.Integer firstHalfExtraTime, java.lang.Integer secondHalfExtraTime, java.util.List<com.whizpath.matchstream.generated.Team> Teams, java.util.List<com.whizpath.matchstream.generated.Player> Players) {
    this.matchId = matchId;
    this.matchType = matchType;
    this.matchAttendance = matchAttendance;
    this.groundName = groundName;
    this.venueCity = venueCity;
    this.venueState = venueState;
    this.venueCountry = venueCountry;
    this.matchDateTime = matchDateTime;
    this.result = result;
    this.firstHalfExtraTime = firstHalfExtraTime;
    this.secondHalfExtraTime = secondHalfExtraTime;
    this.Teams = Teams;
    this.Players = Players;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return matchId;
    case 1: return matchType;
    case 2: return matchAttendance;
    case 3: return groundName;
    case 4: return venueCity;
    case 5: return venueState;
    case 6: return venueCountry;
    case 7: return matchDateTime;
    case 8: return result;
    case 9: return firstHalfExtraTime;
    case 10: return secondHalfExtraTime;
    case 11: return Teams;
    case 12: return Players;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: matchId = value$ != null ? value$.toString() : null; break;
    case 1: matchType = (com.whizpath.matchstream.generated.MatchType)value$; break;
    case 2: matchAttendance = (java.lang.Long)value$; break;
    case 3: groundName = value$ != null ? value$.toString() : null; break;
    case 4: venueCity = value$ != null ? value$.toString() : null; break;
    case 5: venueState = value$ != null ? value$.toString() : null; break;
    case 6: venueCountry = value$ != null ? value$.toString() : null; break;
    case 7: matchDateTime = value$ != null ? value$.toString() : null; break;
    case 8: result = value$ != null ? value$.toString() : null; break;
    case 9: firstHalfExtraTime = (java.lang.Integer)value$; break;
    case 10: secondHalfExtraTime = (java.lang.Integer)value$; break;
    case 11: Teams = (java.util.List<com.whizpath.matchstream.generated.Team>)value$; break;
    case 12: Players = (java.util.List<com.whizpath.matchstream.generated.Player>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'matchId' field.
   * @return The value of the 'matchId' field.
   */
  public java.lang.String getMatchId() {
    return matchId;
  }


  /**
   * Sets the value of the 'matchId' field.
   * @param value the value to set.
   */
  public void setMatchId(java.lang.String value) {
    this.matchId = value;
  }

  /**
   * Gets the value of the 'matchType' field.
   * @return The value of the 'matchType' field.
   */
  public com.whizpath.matchstream.generated.MatchType getMatchType() {
    return matchType;
  }


  /**
   * Sets the value of the 'matchType' field.
   * @param value the value to set.
   */
  public void setMatchType(com.whizpath.matchstream.generated.MatchType value) {
    this.matchType = value;
  }

  /**
   * Gets the value of the 'matchAttendance' field.
   * @return The value of the 'matchAttendance' field.
   */
  public long getMatchAttendance() {
    return matchAttendance;
  }


  /**
   * Sets the value of the 'matchAttendance' field.
   * @param value the value to set.
   */
  public void setMatchAttendance(long value) {
    this.matchAttendance = value;
  }

  /**
   * Gets the value of the 'groundName' field.
   * @return The value of the 'groundName' field.
   */
  public java.lang.String getGroundName() {
    return groundName;
  }


  /**
   * Sets the value of the 'groundName' field.
   * @param value the value to set.
   */
  public void setGroundName(java.lang.String value) {
    this.groundName = value;
  }

  /**
   * Gets the value of the 'venueCity' field.
   * @return The value of the 'venueCity' field.
   */
  public java.lang.String getVenueCity() {
    return venueCity;
  }


  /**
   * Sets the value of the 'venueCity' field.
   * @param value the value to set.
   */
  public void setVenueCity(java.lang.String value) {
    this.venueCity = value;
  }

  /**
   * Gets the value of the 'venueState' field.
   * @return The value of the 'venueState' field.
   */
  public java.lang.String getVenueState() {
    return venueState;
  }


  /**
   * Sets the value of the 'venueState' field.
   * @param value the value to set.
   */
  public void setVenueState(java.lang.String value) {
    this.venueState = value;
  }

  /**
   * Gets the value of the 'venueCountry' field.
   * @return The value of the 'venueCountry' field.
   */
  public java.lang.String getVenueCountry() {
    return venueCountry;
  }


  /**
   * Sets the value of the 'venueCountry' field.
   * @param value the value to set.
   */
  public void setVenueCountry(java.lang.String value) {
    this.venueCountry = value;
  }

  /**
   * Gets the value of the 'matchDateTime' field.
   * @return The value of the 'matchDateTime' field.
   */
  public java.lang.String getMatchDateTime() {
    return matchDateTime;
  }


  /**
   * Sets the value of the 'matchDateTime' field.
   * @param value the value to set.
   */
  public void setMatchDateTime(java.lang.String value) {
    this.matchDateTime = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public java.lang.String getResult() {
    return result;
  }


  /**
   * Sets the value of the 'result' field.
   * @param value the value to set.
   */
  public void setResult(java.lang.String value) {
    this.result = value;
  }

  /**
   * Gets the value of the 'firstHalfExtraTime' field.
   * @return The value of the 'firstHalfExtraTime' field.
   */
  public int getFirstHalfExtraTime() {
    return firstHalfExtraTime;
  }


  /**
   * Sets the value of the 'firstHalfExtraTime' field.
   * @param value the value to set.
   */
  public void setFirstHalfExtraTime(int value) {
    this.firstHalfExtraTime = value;
  }

  /**
   * Gets the value of the 'secondHalfExtraTime' field.
   * @return The value of the 'secondHalfExtraTime' field.
   */
  public int getSecondHalfExtraTime() {
    return secondHalfExtraTime;
  }


  /**
   * Sets the value of the 'secondHalfExtraTime' field.
   * @param value the value to set.
   */
  public void setSecondHalfExtraTime(int value) {
    this.secondHalfExtraTime = value;
  }

  /**
   * Gets the value of the 'Teams' field.
   * @return The value of the 'Teams' field.
   */
  public java.util.List<com.whizpath.matchstream.generated.Team> getTeams() {
    return Teams;
  }


  /**
   * Sets the value of the 'Teams' field.
   * @param value the value to set.
   */
  public void setTeams(java.util.List<com.whizpath.matchstream.generated.Team> value) {
    this.Teams = value;
  }

  /**
   * Gets the value of the 'Players' field.
   * @return The value of the 'Players' field.
   */
  public java.util.List<com.whizpath.matchstream.generated.Player> getPlayers() {
    return Players;
  }


  /**
   * Sets the value of the 'Players' field.
   * @param value the value to set.
   */
  public void setPlayers(java.util.List<com.whizpath.matchstream.generated.Player> value) {
    this.Players = value;
  }

  /**
   * Creates a new MatchScore RecordBuilder.
   * @return A new MatchScore RecordBuilder
   */
  public static com.whizpath.matchstream.generated.MatchScore.Builder newBuilder() {
    return new com.whizpath.matchstream.generated.MatchScore.Builder();
  }

  /**
   * Creates a new MatchScore RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MatchScore RecordBuilder
   */
  public static com.whizpath.matchstream.generated.MatchScore.Builder newBuilder(com.whizpath.matchstream.generated.MatchScore.Builder other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.MatchScore.Builder();
    } else {
      return new com.whizpath.matchstream.generated.MatchScore.Builder(other);
    }
  }

  /**
   * Creates a new MatchScore RecordBuilder by copying an existing MatchScore instance.
   * @param other The existing instance to copy.
   * @return A new MatchScore RecordBuilder
   */
  public static com.whizpath.matchstream.generated.MatchScore.Builder newBuilder(com.whizpath.matchstream.generated.MatchScore other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.MatchScore.Builder();
    } else {
      return new com.whizpath.matchstream.generated.MatchScore.Builder(other);
    }
  }

  /**
   * RecordBuilder for MatchScore instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MatchScore>
    implements org.apache.avro.data.RecordBuilder<MatchScore> {

    private java.lang.String matchId;
    private com.whizpath.matchstream.generated.MatchType matchType;
    private long matchAttendance;
    private java.lang.String groundName;
    private java.lang.String venueCity;
    private java.lang.String venueState;
    private java.lang.String venueCountry;
    private java.lang.String matchDateTime;
    private java.lang.String result;
    private int firstHalfExtraTime;
    private int secondHalfExtraTime;
    private java.util.List<com.whizpath.matchstream.generated.Team> Teams;
    private java.util.List<com.whizpath.matchstream.generated.Player> Players;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.whizpath.matchstream.generated.MatchScore.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.matchId)) {
        this.matchId = data().deepCopy(fields()[0].schema(), other.matchId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.matchType)) {
        this.matchType = data().deepCopy(fields()[1].schema(), other.matchType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.matchAttendance)) {
        this.matchAttendance = data().deepCopy(fields()[2].schema(), other.matchAttendance);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.groundName)) {
        this.groundName = data().deepCopy(fields()[3].schema(), other.groundName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.venueCity)) {
        this.venueCity = data().deepCopy(fields()[4].schema(), other.venueCity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.venueState)) {
        this.venueState = data().deepCopy(fields()[5].schema(), other.venueState);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.venueCountry)) {
        this.venueCountry = data().deepCopy(fields()[6].schema(), other.venueCountry);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.matchDateTime)) {
        this.matchDateTime = data().deepCopy(fields()[7].schema(), other.matchDateTime);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.result)) {
        this.result = data().deepCopy(fields()[8].schema(), other.result);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.firstHalfExtraTime)) {
        this.firstHalfExtraTime = data().deepCopy(fields()[9].schema(), other.firstHalfExtraTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.secondHalfExtraTime)) {
        this.secondHalfExtraTime = data().deepCopy(fields()[10].schema(), other.secondHalfExtraTime);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.Teams)) {
        this.Teams = data().deepCopy(fields()[11].schema(), other.Teams);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.Players)) {
        this.Players = data().deepCopy(fields()[12].schema(), other.Players);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing MatchScore instance
     * @param other The existing instance to copy.
     */
    private Builder(com.whizpath.matchstream.generated.MatchScore other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.matchId)) {
        this.matchId = data().deepCopy(fields()[0].schema(), other.matchId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.matchType)) {
        this.matchType = data().deepCopy(fields()[1].schema(), other.matchType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.matchAttendance)) {
        this.matchAttendance = data().deepCopy(fields()[2].schema(), other.matchAttendance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groundName)) {
        this.groundName = data().deepCopy(fields()[3].schema(), other.groundName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.venueCity)) {
        this.venueCity = data().deepCopy(fields()[4].schema(), other.venueCity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.venueState)) {
        this.venueState = data().deepCopy(fields()[5].schema(), other.venueState);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.venueCountry)) {
        this.venueCountry = data().deepCopy(fields()[6].schema(), other.venueCountry);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.matchDateTime)) {
        this.matchDateTime = data().deepCopy(fields()[7].schema(), other.matchDateTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.result)) {
        this.result = data().deepCopy(fields()[8].schema(), other.result);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.firstHalfExtraTime)) {
        this.firstHalfExtraTime = data().deepCopy(fields()[9].schema(), other.firstHalfExtraTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.secondHalfExtraTime)) {
        this.secondHalfExtraTime = data().deepCopy(fields()[10].schema(), other.secondHalfExtraTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.Teams)) {
        this.Teams = data().deepCopy(fields()[11].schema(), other.Teams);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.Players)) {
        this.Players = data().deepCopy(fields()[12].schema(), other.Players);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'matchId' field.
      * @return The value.
      */
    public java.lang.String getMatchId() {
      return matchId;
    }


    /**
      * Sets the value of the 'matchId' field.
      * @param value The value of 'matchId'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setMatchId(java.lang.String value) {
      validate(fields()[0], value);
      this.matchId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'matchId' field has been set.
      * @return True if the 'matchId' field has been set, false otherwise.
      */
    public boolean hasMatchId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'matchId' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearMatchId() {
      matchId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchType' field.
      * @return The value.
      */
    public com.whizpath.matchstream.generated.MatchType getMatchType() {
      return matchType;
    }


    /**
      * Sets the value of the 'matchType' field.
      * @param value The value of 'matchType'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setMatchType(com.whizpath.matchstream.generated.MatchType value) {
      validate(fields()[1], value);
      this.matchType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'matchType' field has been set.
      * @return True if the 'matchType' field has been set, false otherwise.
      */
    public boolean hasMatchType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'matchType' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearMatchType() {
      matchType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchAttendance' field.
      * @return The value.
      */
    public long getMatchAttendance() {
      return matchAttendance;
    }


    /**
      * Sets the value of the 'matchAttendance' field.
      * @param value The value of 'matchAttendance'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setMatchAttendance(long value) {
      validate(fields()[2], value);
      this.matchAttendance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'matchAttendance' field has been set.
      * @return True if the 'matchAttendance' field has been set, false otherwise.
      */
    public boolean hasMatchAttendance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'matchAttendance' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearMatchAttendance() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'groundName' field.
      * @return The value.
      */
    public java.lang.String getGroundName() {
      return groundName;
    }


    /**
      * Sets the value of the 'groundName' field.
      * @param value The value of 'groundName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setGroundName(java.lang.String value) {
      validate(fields()[3], value);
      this.groundName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'groundName' field has been set.
      * @return True if the 'groundName' field has been set, false otherwise.
      */
    public boolean hasGroundName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'groundName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearGroundName() {
      groundName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'venueCity' field.
      * @return The value.
      */
    public java.lang.String getVenueCity() {
      return venueCity;
    }


    /**
      * Sets the value of the 'venueCity' field.
      * @param value The value of 'venueCity'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setVenueCity(java.lang.String value) {
      validate(fields()[4], value);
      this.venueCity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'venueCity' field has been set.
      * @return True if the 'venueCity' field has been set, false otherwise.
      */
    public boolean hasVenueCity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'venueCity' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearVenueCity() {
      venueCity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'venueState' field.
      * @return The value.
      */
    public java.lang.String getVenueState() {
      return venueState;
    }


    /**
      * Sets the value of the 'venueState' field.
      * @param value The value of 'venueState'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setVenueState(java.lang.String value) {
      validate(fields()[5], value);
      this.venueState = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'venueState' field has been set.
      * @return True if the 'venueState' field has been set, false otherwise.
      */
    public boolean hasVenueState() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'venueState' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearVenueState() {
      venueState = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'venueCountry' field.
      * @return The value.
      */
    public java.lang.String getVenueCountry() {
      return venueCountry;
    }


    /**
      * Sets the value of the 'venueCountry' field.
      * @param value The value of 'venueCountry'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setVenueCountry(java.lang.String value) {
      validate(fields()[6], value);
      this.venueCountry = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'venueCountry' field has been set.
      * @return True if the 'venueCountry' field has been set, false otherwise.
      */
    public boolean hasVenueCountry() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'venueCountry' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearVenueCountry() {
      venueCountry = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchDateTime' field.
      * @return The value.
      */
    public java.lang.String getMatchDateTime() {
      return matchDateTime;
    }


    /**
      * Sets the value of the 'matchDateTime' field.
      * @param value The value of 'matchDateTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setMatchDateTime(java.lang.String value) {
      validate(fields()[7], value);
      this.matchDateTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'matchDateTime' field has been set.
      * @return True if the 'matchDateTime' field has been set, false otherwise.
      */
    public boolean hasMatchDateTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'matchDateTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearMatchDateTime() {
      matchDateTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public java.lang.String getResult() {
      return result;
    }


    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setResult(java.lang.String value) {
      validate(fields()[8], value);
      this.result = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearResult() {
      result = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstHalfExtraTime' field.
      * @return The value.
      */
    public int getFirstHalfExtraTime() {
      return firstHalfExtraTime;
    }


    /**
      * Sets the value of the 'firstHalfExtraTime' field.
      * @param value The value of 'firstHalfExtraTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setFirstHalfExtraTime(int value) {
      validate(fields()[9], value);
      this.firstHalfExtraTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'firstHalfExtraTime' field has been set.
      * @return True if the 'firstHalfExtraTime' field has been set, false otherwise.
      */
    public boolean hasFirstHalfExtraTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'firstHalfExtraTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearFirstHalfExtraTime() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondHalfExtraTime' field.
      * @return The value.
      */
    public int getSecondHalfExtraTime() {
      return secondHalfExtraTime;
    }


    /**
      * Sets the value of the 'secondHalfExtraTime' field.
      * @param value The value of 'secondHalfExtraTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setSecondHalfExtraTime(int value) {
      validate(fields()[10], value);
      this.secondHalfExtraTime = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'secondHalfExtraTime' field has been set.
      * @return True if the 'secondHalfExtraTime' field has been set, false otherwise.
      */
    public boolean hasSecondHalfExtraTime() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'secondHalfExtraTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearSecondHalfExtraTime() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'Teams' field.
      * @return The value.
      */
    public java.util.List<com.whizpath.matchstream.generated.Team> getTeams() {
      return Teams;
    }


    /**
      * Sets the value of the 'Teams' field.
      * @param value The value of 'Teams'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setTeams(java.util.List<com.whizpath.matchstream.generated.Team> value) {
      validate(fields()[11], value);
      this.Teams = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'Teams' field has been set.
      * @return True if the 'Teams' field has been set, false otherwise.
      */
    public boolean hasTeams() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'Teams' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearTeams() {
      Teams = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'Players' field.
      * @return The value.
      */
    public java.util.List<com.whizpath.matchstream.generated.Player> getPlayers() {
      return Players;
    }


    /**
      * Sets the value of the 'Players' field.
      * @param value The value of 'Players'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder setPlayers(java.util.List<com.whizpath.matchstream.generated.Player> value) {
      validate(fields()[12], value);
      this.Players = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'Players' field has been set.
      * @return True if the 'Players' field has been set, false otherwise.
      */
    public boolean hasPlayers() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'Players' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.MatchScore.Builder clearPlayers() {
      Players = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MatchScore build() {
      try {
        MatchScore record = new MatchScore();
        record.matchId = fieldSetFlags()[0] ? this.matchId : (java.lang.String) defaultValue(fields()[0]);
        record.matchType = fieldSetFlags()[1] ? this.matchType : (com.whizpath.matchstream.generated.MatchType) defaultValue(fields()[1]);
        record.matchAttendance = fieldSetFlags()[2] ? this.matchAttendance : (java.lang.Long) defaultValue(fields()[2]);
        record.groundName = fieldSetFlags()[3] ? this.groundName : (java.lang.String) defaultValue(fields()[3]);
        record.venueCity = fieldSetFlags()[4] ? this.venueCity : (java.lang.String) defaultValue(fields()[4]);
        record.venueState = fieldSetFlags()[5] ? this.venueState : (java.lang.String) defaultValue(fields()[5]);
        record.venueCountry = fieldSetFlags()[6] ? this.venueCountry : (java.lang.String) defaultValue(fields()[6]);
        record.matchDateTime = fieldSetFlags()[7] ? this.matchDateTime : (java.lang.String) defaultValue(fields()[7]);
        record.result = fieldSetFlags()[8] ? this.result : (java.lang.String) defaultValue(fields()[8]);
        record.firstHalfExtraTime = fieldSetFlags()[9] ? this.firstHalfExtraTime : (java.lang.Integer) defaultValue(fields()[9]);
        record.secondHalfExtraTime = fieldSetFlags()[10] ? this.secondHalfExtraTime : (java.lang.Integer) defaultValue(fields()[10]);
        record.Teams = fieldSetFlags()[11] ? this.Teams : (java.util.List<com.whizpath.matchstream.generated.Team>) defaultValue(fields()[11]);
        record.Players = fieldSetFlags()[12] ? this.Players : (java.util.List<com.whizpath.matchstream.generated.Player>) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MatchScore>
    WRITER$ = (org.apache.avro.io.DatumWriter<MatchScore>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MatchScore>
    READER$ = (org.apache.avro.io.DatumReader<MatchScore>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.matchId);

    out.writeEnum(this.matchType.ordinal());

    out.writeLong(this.matchAttendance);

    out.writeString(this.groundName);

    out.writeString(this.venueCity);

    out.writeString(this.venueState);

    out.writeString(this.venueCountry);

    out.writeString(this.matchDateTime);

    out.writeString(this.result);

    out.writeInt(this.firstHalfExtraTime);

    out.writeInt(this.secondHalfExtraTime);

    long size0 = this.Teams.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.whizpath.matchstream.generated.Team e0: this.Teams) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.Players.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.whizpath.matchstream.generated.Player e1: this.Players) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.matchId = in.readString();

      this.matchType = com.whizpath.matchstream.generated.MatchType.values()[in.readEnum()];

      this.matchAttendance = in.readLong();

      this.groundName = in.readString();

      this.venueCity = in.readString();

      this.venueState = in.readString();

      this.venueCountry = in.readString();

      this.matchDateTime = in.readString();

      this.result = in.readString();

      this.firstHalfExtraTime = in.readInt();

      this.secondHalfExtraTime = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<com.whizpath.matchstream.generated.Team> a0 = this.Teams;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.whizpath.matchstream.generated.Team>((int)size0, SCHEMA$.getField("Teams").schema());
        this.Teams = a0;
      } else a0.clear();
      SpecificData.Array<com.whizpath.matchstream.generated.Team> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.whizpath.matchstream.generated.Team>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.whizpath.matchstream.generated.Team e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.whizpath.matchstream.generated.Team();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.whizpath.matchstream.generated.Player> a1 = this.Players;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.whizpath.matchstream.generated.Player>((int)size1, SCHEMA$.getField("Players").schema());
        this.Players = a1;
      } else a1.clear();
      SpecificData.Array<com.whizpath.matchstream.generated.Player> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.whizpath.matchstream.generated.Player>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.whizpath.matchstream.generated.Player e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.whizpath.matchstream.generated.Player();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.matchId = in.readString();
          break;

        case 1:
          this.matchType = com.whizpath.matchstream.generated.MatchType.values()[in.readEnum()];
          break;

        case 2:
          this.matchAttendance = in.readLong();
          break;

        case 3:
          this.groundName = in.readString();
          break;

        case 4:
          this.venueCity = in.readString();
          break;

        case 5:
          this.venueState = in.readString();
          break;

        case 6:
          this.venueCountry = in.readString();
          break;

        case 7:
          this.matchDateTime = in.readString();
          break;

        case 8:
          this.result = in.readString();
          break;

        case 9:
          this.firstHalfExtraTime = in.readInt();
          break;

        case 10:
          this.secondHalfExtraTime = in.readInt();
          break;

        case 11:
          long size0 = in.readArrayStart();
          java.util.List<com.whizpath.matchstream.generated.Team> a0 = this.Teams;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.whizpath.matchstream.generated.Team>((int)size0, SCHEMA$.getField("Teams").schema());
            this.Teams = a0;
          } else a0.clear();
          SpecificData.Array<com.whizpath.matchstream.generated.Team> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.whizpath.matchstream.generated.Team>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.whizpath.matchstream.generated.Team e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.whizpath.matchstream.generated.Team();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 12:
          long size1 = in.readArrayStart();
          java.util.List<com.whizpath.matchstream.generated.Player> a1 = this.Players;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.whizpath.matchstream.generated.Player>((int)size1, SCHEMA$.getField("Players").schema());
            this.Players = a1;
          } else a1.clear();
          SpecificData.Array<com.whizpath.matchstream.generated.Player> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.whizpath.matchstream.generated.Player>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.whizpath.matchstream.generated.Player e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.whizpath.matchstream.generated.Player();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










