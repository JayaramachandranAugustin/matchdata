/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whizpath.matchstream.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Team extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4663098106583357438L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Team\",\"namespace\":\"com.whizpath.matchstream.generated\",\"fields\":[{\"name\":\"teamName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teamId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teamGoal\",\"type\":\"int\"},{\"name\":\"isHome\",\"type\":\"boolean\"},{\"name\":\"yellowCardCount\",\"type\":\"int\"},{\"name\":\"redCardCount\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Team> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Team> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Team> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Team> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Team> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Team to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Team from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Team instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Team fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String teamName;
  private java.lang.String teamId;
  private int teamGoal;
  private boolean isHome;
  private int yellowCardCount;
  private int redCardCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Team() {}

  /**
   * All-args constructor.
   * @param teamName The new value for teamName
   * @param teamId The new value for teamId
   * @param teamGoal The new value for teamGoal
   * @param isHome The new value for isHome
   * @param yellowCardCount The new value for yellowCardCount
   * @param redCardCount The new value for redCardCount
   */
  public Team(java.lang.String teamName, java.lang.String teamId, java.lang.Integer teamGoal, java.lang.Boolean isHome, java.lang.Integer yellowCardCount, java.lang.Integer redCardCount) {
    this.teamName = teamName;
    this.teamId = teamId;
    this.teamGoal = teamGoal;
    this.isHome = isHome;
    this.yellowCardCount = yellowCardCount;
    this.redCardCount = redCardCount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return teamName;
    case 1: return teamId;
    case 2: return teamGoal;
    case 3: return isHome;
    case 4: return yellowCardCount;
    case 5: return redCardCount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: teamName = value$ != null ? value$.toString() : null; break;
    case 1: teamId = value$ != null ? value$.toString() : null; break;
    case 2: teamGoal = (java.lang.Integer)value$; break;
    case 3: isHome = (java.lang.Boolean)value$; break;
    case 4: yellowCardCount = (java.lang.Integer)value$; break;
    case 5: redCardCount = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'teamName' field.
   * @return The value of the 'teamName' field.
   */
  public java.lang.String getTeamName() {
    return teamName;
  }


  /**
   * Sets the value of the 'teamName' field.
   * @param value the value to set.
   */
  public void setTeamName(java.lang.String value) {
    this.teamName = value;
  }

  /**
   * Gets the value of the 'teamId' field.
   * @return The value of the 'teamId' field.
   */
  public java.lang.String getTeamId() {
    return teamId;
  }


  /**
   * Sets the value of the 'teamId' field.
   * @param value the value to set.
   */
  public void setTeamId(java.lang.String value) {
    this.teamId = value;
  }

  /**
   * Gets the value of the 'teamGoal' field.
   * @return The value of the 'teamGoal' field.
   */
  public int getTeamGoal() {
    return teamGoal;
  }


  /**
   * Sets the value of the 'teamGoal' field.
   * @param value the value to set.
   */
  public void setTeamGoal(int value) {
    this.teamGoal = value;
  }

  /**
   * Gets the value of the 'isHome' field.
   * @return The value of the 'isHome' field.
   */
  public boolean getIsHome() {
    return isHome;
  }


  /**
   * Sets the value of the 'isHome' field.
   * @param value the value to set.
   */
  public void setIsHome(boolean value) {
    this.isHome = value;
  }

  /**
   * Gets the value of the 'yellowCardCount' field.
   * @return The value of the 'yellowCardCount' field.
   */
  public int getYellowCardCount() {
    return yellowCardCount;
  }


  /**
   * Sets the value of the 'yellowCardCount' field.
   * @param value the value to set.
   */
  public void setYellowCardCount(int value) {
    this.yellowCardCount = value;
  }

  /**
   * Gets the value of the 'redCardCount' field.
   * @return The value of the 'redCardCount' field.
   */
  public int getRedCardCount() {
    return redCardCount;
  }


  /**
   * Sets the value of the 'redCardCount' field.
   * @param value the value to set.
   */
  public void setRedCardCount(int value) {
    this.redCardCount = value;
  }

  /**
   * Creates a new Team RecordBuilder.
   * @return A new Team RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Team.Builder newBuilder() {
    return new com.whizpath.matchstream.generated.Team.Builder();
  }

  /**
   * Creates a new Team RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Team RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Team.Builder newBuilder(com.whizpath.matchstream.generated.Team.Builder other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.Team.Builder();
    } else {
      return new com.whizpath.matchstream.generated.Team.Builder(other);
    }
  }

  /**
   * Creates a new Team RecordBuilder by copying an existing Team instance.
   * @param other The existing instance to copy.
   * @return A new Team RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Team.Builder newBuilder(com.whizpath.matchstream.generated.Team other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.Team.Builder();
    } else {
      return new com.whizpath.matchstream.generated.Team.Builder(other);
    }
  }

  /**
   * RecordBuilder for Team instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Team>
    implements org.apache.avro.data.RecordBuilder<Team> {

    private java.lang.String teamName;
    private java.lang.String teamId;
    private int teamGoal;
    private boolean isHome;
    private int yellowCardCount;
    private int redCardCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.whizpath.matchstream.generated.Team.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.teamName)) {
        this.teamName = data().deepCopy(fields()[0].schema(), other.teamName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.teamId)) {
        this.teamId = data().deepCopy(fields()[1].schema(), other.teamId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.teamGoal)) {
        this.teamGoal = data().deepCopy(fields()[2].schema(), other.teamGoal);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.isHome)) {
        this.isHome = data().deepCopy(fields()[3].schema(), other.isHome);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.yellowCardCount)) {
        this.yellowCardCount = data().deepCopy(fields()[4].schema(), other.yellowCardCount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.redCardCount)) {
        this.redCardCount = data().deepCopy(fields()[5].schema(), other.redCardCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Team instance
     * @param other The existing instance to copy.
     */
    private Builder(com.whizpath.matchstream.generated.Team other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.teamName)) {
        this.teamName = data().deepCopy(fields()[0].schema(), other.teamName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.teamId)) {
        this.teamId = data().deepCopy(fields()[1].schema(), other.teamId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teamGoal)) {
        this.teamGoal = data().deepCopy(fields()[2].schema(), other.teamGoal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isHome)) {
        this.isHome = data().deepCopy(fields()[3].schema(), other.isHome);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.yellowCardCount)) {
        this.yellowCardCount = data().deepCopy(fields()[4].schema(), other.yellowCardCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.redCardCount)) {
        this.redCardCount = data().deepCopy(fields()[5].schema(), other.redCardCount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'teamName' field.
      * @return The value.
      */
    public java.lang.String getTeamName() {
      return teamName;
    }


    /**
      * Sets the value of the 'teamName' field.
      * @param value The value of 'teamName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setTeamName(java.lang.String value) {
      validate(fields()[0], value);
      this.teamName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'teamName' field has been set.
      * @return True if the 'teamName' field has been set, false otherwise.
      */
    public boolean hasTeamName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'teamName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearTeamName() {
      teamName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'teamId' field.
      * @return The value.
      */
    public java.lang.String getTeamId() {
      return teamId;
    }


    /**
      * Sets the value of the 'teamId' field.
      * @param value The value of 'teamId'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setTeamId(java.lang.String value) {
      validate(fields()[1], value);
      this.teamId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'teamId' field has been set.
      * @return True if the 'teamId' field has been set, false otherwise.
      */
    public boolean hasTeamId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'teamId' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearTeamId() {
      teamId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'teamGoal' field.
      * @return The value.
      */
    public int getTeamGoal() {
      return teamGoal;
    }


    /**
      * Sets the value of the 'teamGoal' field.
      * @param value The value of 'teamGoal'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setTeamGoal(int value) {
      validate(fields()[2], value);
      this.teamGoal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'teamGoal' field has been set.
      * @return True if the 'teamGoal' field has been set, false otherwise.
      */
    public boolean hasTeamGoal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'teamGoal' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearTeamGoal() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isHome' field.
      * @return The value.
      */
    public boolean getIsHome() {
      return isHome;
    }


    /**
      * Sets the value of the 'isHome' field.
      * @param value The value of 'isHome'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setIsHome(boolean value) {
      validate(fields()[3], value);
      this.isHome = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isHome' field has been set.
      * @return True if the 'isHome' field has been set, false otherwise.
      */
    public boolean hasIsHome() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isHome' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearIsHome() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'yellowCardCount' field.
      * @return The value.
      */
    public int getYellowCardCount() {
      return yellowCardCount;
    }


    /**
      * Sets the value of the 'yellowCardCount' field.
      * @param value The value of 'yellowCardCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setYellowCardCount(int value) {
      validate(fields()[4], value);
      this.yellowCardCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'yellowCardCount' field has been set.
      * @return True if the 'yellowCardCount' field has been set, false otherwise.
      */
    public boolean hasYellowCardCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'yellowCardCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearYellowCardCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'redCardCount' field.
      * @return The value.
      */
    public int getRedCardCount() {
      return redCardCount;
    }


    /**
      * Sets the value of the 'redCardCount' field.
      * @param value The value of 'redCardCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder setRedCardCount(int value) {
      validate(fields()[5], value);
      this.redCardCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'redCardCount' field has been set.
      * @return True if the 'redCardCount' field has been set, false otherwise.
      */
    public boolean hasRedCardCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'redCardCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Team.Builder clearRedCardCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Team build() {
      try {
        Team record = new Team();
        record.teamName = fieldSetFlags()[0] ? this.teamName : (java.lang.String) defaultValue(fields()[0]);
        record.teamId = fieldSetFlags()[1] ? this.teamId : (java.lang.String) defaultValue(fields()[1]);
        record.teamGoal = fieldSetFlags()[2] ? this.teamGoal : (java.lang.Integer) defaultValue(fields()[2]);
        record.isHome = fieldSetFlags()[3] ? this.isHome : (java.lang.Boolean) defaultValue(fields()[3]);
        record.yellowCardCount = fieldSetFlags()[4] ? this.yellowCardCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.redCardCount = fieldSetFlags()[5] ? this.redCardCount : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Team>
    WRITER$ = (org.apache.avro.io.DatumWriter<Team>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Team>
    READER$ = (org.apache.avro.io.DatumReader<Team>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.teamName);

    out.writeString(this.teamId);

    out.writeInt(this.teamGoal);

    out.writeBoolean(this.isHome);

    out.writeInt(this.yellowCardCount);

    out.writeInt(this.redCardCount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.teamName = in.readString();

      this.teamId = in.readString();

      this.teamGoal = in.readInt();

      this.isHome = in.readBoolean();

      this.yellowCardCount = in.readInt();

      this.redCardCount = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.teamName = in.readString();
          break;

        case 1:
          this.teamId = in.readString();
          break;

        case 2:
          this.teamGoal = in.readInt();
          break;

        case 3:
          this.isHome = in.readBoolean();
          break;

        case 4:
          this.yellowCardCount = in.readInt();
          break;

        case 5:
          this.redCardCount = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










