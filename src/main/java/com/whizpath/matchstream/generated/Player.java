/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whizpath.matchstream.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Player extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3371751507629645878L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Player\",\"namespace\":\"com.whizpath.matchstream.generated\",\"fields\":[{\"name\":\"playerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"playerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"goalCount\",\"type\":\"int\"},{\"name\":\"assistCount\",\"type\":\"int\"},{\"name\":\"keypass\",\"type\":\"int\"},{\"name\":\"dribble\",\"type\":\"int\"},{\"name\":\"tackle\",\"type\":\"int\"},{\"name\":\"teamName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"outTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"yellowCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"secondYellowCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"redCardTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Player> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Player> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Player> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Player> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Player> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Player to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Player from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Player instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Player fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String playerName;
  private java.lang.String playerId;
  private int goalCount;
  private int assistCount;
  private int keypass;
  private int dribble;
  private int tackle;
  private java.lang.String teamName;
  private java.lang.String inTime;
  private java.lang.String outTime;
  private java.lang.String yellowCardTime;
  private java.lang.String secondYellowCardTime;
  private java.lang.String redCardTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Player() {}

  /**
   * All-args constructor.
   * @param playerName The new value for playerName
   * @param playerId The new value for playerId
   * @param goalCount The new value for goalCount
   * @param assistCount The new value for assistCount
   * @param keypass The new value for keypass
   * @param dribble The new value for dribble
   * @param tackle The new value for tackle
   * @param teamName The new value for teamName
   * @param inTime The new value for inTime
   * @param outTime The new value for outTime
   * @param yellowCardTime The new value for yellowCardTime
   * @param secondYellowCardTime The new value for secondYellowCardTime
   * @param redCardTime The new value for redCardTime
   */
  public Player(java.lang.String playerName, java.lang.String playerId, java.lang.Integer goalCount, java.lang.Integer assistCount, java.lang.Integer keypass, java.lang.Integer dribble, java.lang.Integer tackle, java.lang.String teamName, java.lang.String inTime, java.lang.String outTime, java.lang.String yellowCardTime, java.lang.String secondYellowCardTime, java.lang.String redCardTime) {
    this.playerName = playerName;
    this.playerId = playerId;
    this.goalCount = goalCount;
    this.assistCount = assistCount;
    this.keypass = keypass;
    this.dribble = dribble;
    this.tackle = tackle;
    this.teamName = teamName;
    this.inTime = inTime;
    this.outTime = outTime;
    this.yellowCardTime = yellowCardTime;
    this.secondYellowCardTime = secondYellowCardTime;
    this.redCardTime = redCardTime;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return playerName;
    case 1: return playerId;
    case 2: return goalCount;
    case 3: return assistCount;
    case 4: return keypass;
    case 5: return dribble;
    case 6: return tackle;
    case 7: return teamName;
    case 8: return inTime;
    case 9: return outTime;
    case 10: return yellowCardTime;
    case 11: return secondYellowCardTime;
    case 12: return redCardTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: playerName = value$ != null ? value$.toString() : null; break;
    case 1: playerId = value$ != null ? value$.toString() : null; break;
    case 2: goalCount = (java.lang.Integer)value$; break;
    case 3: assistCount = (java.lang.Integer)value$; break;
    case 4: keypass = (java.lang.Integer)value$; break;
    case 5: dribble = (java.lang.Integer)value$; break;
    case 6: tackle = (java.lang.Integer)value$; break;
    case 7: teamName = value$ != null ? value$.toString() : null; break;
    case 8: inTime = value$ != null ? value$.toString() : null; break;
    case 9: outTime = value$ != null ? value$.toString() : null; break;
    case 10: yellowCardTime = value$ != null ? value$.toString() : null; break;
    case 11: secondYellowCardTime = value$ != null ? value$.toString() : null; break;
    case 12: redCardTime = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'playerName' field.
   * @return The value of the 'playerName' field.
   */
  public java.lang.String getPlayerName() {
    return playerName;
  }


  /**
   * Sets the value of the 'playerName' field.
   * @param value the value to set.
   */
  public void setPlayerName(java.lang.String value) {
    this.playerName = value;
  }

  /**
   * Gets the value of the 'playerId' field.
   * @return The value of the 'playerId' field.
   */
  public java.lang.String getPlayerId() {
    return playerId;
  }


  /**
   * Sets the value of the 'playerId' field.
   * @param value the value to set.
   */
  public void setPlayerId(java.lang.String value) {
    this.playerId = value;
  }

  /**
   * Gets the value of the 'goalCount' field.
   * @return The value of the 'goalCount' field.
   */
  public int getGoalCount() {
    return goalCount;
  }


  /**
   * Sets the value of the 'goalCount' field.
   * @param value the value to set.
   */
  public void setGoalCount(int value) {
    this.goalCount = value;
  }

  /**
   * Gets the value of the 'assistCount' field.
   * @return The value of the 'assistCount' field.
   */
  public int getAssistCount() {
    return assistCount;
  }


  /**
   * Sets the value of the 'assistCount' field.
   * @param value the value to set.
   */
  public void setAssistCount(int value) {
    this.assistCount = value;
  }

  /**
   * Gets the value of the 'keypass' field.
   * @return The value of the 'keypass' field.
   */
  public int getKeypass() {
    return keypass;
  }


  /**
   * Sets the value of the 'keypass' field.
   * @param value the value to set.
   */
  public void setKeypass(int value) {
    this.keypass = value;
  }

  /**
   * Gets the value of the 'dribble' field.
   * @return The value of the 'dribble' field.
   */
  public int getDribble() {
    return dribble;
  }


  /**
   * Sets the value of the 'dribble' field.
   * @param value the value to set.
   */
  public void setDribble(int value) {
    this.dribble = value;
  }

  /**
   * Gets the value of the 'tackle' field.
   * @return The value of the 'tackle' field.
   */
  public int getTackle() {
    return tackle;
  }


  /**
   * Sets the value of the 'tackle' field.
   * @param value the value to set.
   */
  public void setTackle(int value) {
    this.tackle = value;
  }

  /**
   * Gets the value of the 'teamName' field.
   * @return The value of the 'teamName' field.
   */
  public java.lang.String getTeamName() {
    return teamName;
  }


  /**
   * Sets the value of the 'teamName' field.
   * @param value the value to set.
   */
  public void setTeamName(java.lang.String value) {
    this.teamName = value;
  }

  /**
   * Gets the value of the 'inTime' field.
   * @return The value of the 'inTime' field.
   */
  public java.lang.String getInTime() {
    return inTime;
  }


  /**
   * Sets the value of the 'inTime' field.
   * @param value the value to set.
   */
  public void setInTime(java.lang.String value) {
    this.inTime = value;
  }

  /**
   * Gets the value of the 'outTime' field.
   * @return The value of the 'outTime' field.
   */
  public java.lang.String getOutTime() {
    return outTime;
  }


  /**
   * Sets the value of the 'outTime' field.
   * @param value the value to set.
   */
  public void setOutTime(java.lang.String value) {
    this.outTime = value;
  }

  /**
   * Gets the value of the 'yellowCardTime' field.
   * @return The value of the 'yellowCardTime' field.
   */
  public java.lang.String getYellowCardTime() {
    return yellowCardTime;
  }


  /**
   * Sets the value of the 'yellowCardTime' field.
   * @param value the value to set.
   */
  public void setYellowCardTime(java.lang.String value) {
    this.yellowCardTime = value;
  }

  /**
   * Gets the value of the 'secondYellowCardTime' field.
   * @return The value of the 'secondYellowCardTime' field.
   */
  public java.lang.String getSecondYellowCardTime() {
    return secondYellowCardTime;
  }


  /**
   * Sets the value of the 'secondYellowCardTime' field.
   * @param value the value to set.
   */
  public void setSecondYellowCardTime(java.lang.String value) {
    this.secondYellowCardTime = value;
  }

  /**
   * Gets the value of the 'redCardTime' field.
   * @return The value of the 'redCardTime' field.
   */
  public java.lang.String getRedCardTime() {
    return redCardTime;
  }


  /**
   * Sets the value of the 'redCardTime' field.
   * @param value the value to set.
   */
  public void setRedCardTime(java.lang.String value) {
    this.redCardTime = value;
  }

  /**
   * Creates a new Player RecordBuilder.
   * @return A new Player RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Player.Builder newBuilder() {
    return new com.whizpath.matchstream.generated.Player.Builder();
  }

  /**
   * Creates a new Player RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Player RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Player.Builder newBuilder(com.whizpath.matchstream.generated.Player.Builder other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.Player.Builder();
    } else {
      return new com.whizpath.matchstream.generated.Player.Builder(other);
    }
  }

  /**
   * Creates a new Player RecordBuilder by copying an existing Player instance.
   * @param other The existing instance to copy.
   * @return A new Player RecordBuilder
   */
  public static com.whizpath.matchstream.generated.Player.Builder newBuilder(com.whizpath.matchstream.generated.Player other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.Player.Builder();
    } else {
      return new com.whizpath.matchstream.generated.Player.Builder(other);
    }
  }

  /**
   * RecordBuilder for Player instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Player>
    implements org.apache.avro.data.RecordBuilder<Player> {

    private java.lang.String playerName;
    private java.lang.String playerId;
    private int goalCount;
    private int assistCount;
    private int keypass;
    private int dribble;
    private int tackle;
    private java.lang.String teamName;
    private java.lang.String inTime;
    private java.lang.String outTime;
    private java.lang.String yellowCardTime;
    private java.lang.String secondYellowCardTime;
    private java.lang.String redCardTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.whizpath.matchstream.generated.Player.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.playerName)) {
        this.playerName = data().deepCopy(fields()[0].schema(), other.playerName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.playerId)) {
        this.playerId = data().deepCopy(fields()[1].schema(), other.playerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.goalCount)) {
        this.goalCount = data().deepCopy(fields()[2].schema(), other.goalCount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.assistCount)) {
        this.assistCount = data().deepCopy(fields()[3].schema(), other.assistCount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.keypass)) {
        this.keypass = data().deepCopy(fields()[4].schema(), other.keypass);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.dribble)) {
        this.dribble = data().deepCopy(fields()[5].schema(), other.dribble);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tackle)) {
        this.tackle = data().deepCopy(fields()[6].schema(), other.tackle);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.teamName)) {
        this.teamName = data().deepCopy(fields()[7].schema(), other.teamName);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.inTime)) {
        this.inTime = data().deepCopy(fields()[8].schema(), other.inTime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.outTime)) {
        this.outTime = data().deepCopy(fields()[9].schema(), other.outTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.yellowCardTime)) {
        this.yellowCardTime = data().deepCopy(fields()[10].schema(), other.yellowCardTime);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.secondYellowCardTime)) {
        this.secondYellowCardTime = data().deepCopy(fields()[11].schema(), other.secondYellowCardTime);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.redCardTime)) {
        this.redCardTime = data().deepCopy(fields()[12].schema(), other.redCardTime);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing Player instance
     * @param other The existing instance to copy.
     */
    private Builder(com.whizpath.matchstream.generated.Player other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.playerName)) {
        this.playerName = data().deepCopy(fields()[0].schema(), other.playerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.playerId)) {
        this.playerId = data().deepCopy(fields()[1].schema(), other.playerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.goalCount)) {
        this.goalCount = data().deepCopy(fields()[2].schema(), other.goalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assistCount)) {
        this.assistCount = data().deepCopy(fields()[3].schema(), other.assistCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.keypass)) {
        this.keypass = data().deepCopy(fields()[4].schema(), other.keypass);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dribble)) {
        this.dribble = data().deepCopy(fields()[5].schema(), other.dribble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tackle)) {
        this.tackle = data().deepCopy(fields()[6].schema(), other.tackle);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.teamName)) {
        this.teamName = data().deepCopy(fields()[7].schema(), other.teamName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.inTime)) {
        this.inTime = data().deepCopy(fields()[8].schema(), other.inTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.outTime)) {
        this.outTime = data().deepCopy(fields()[9].schema(), other.outTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.yellowCardTime)) {
        this.yellowCardTime = data().deepCopy(fields()[10].schema(), other.yellowCardTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.secondYellowCardTime)) {
        this.secondYellowCardTime = data().deepCopy(fields()[11].schema(), other.secondYellowCardTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.redCardTime)) {
        this.redCardTime = data().deepCopy(fields()[12].schema(), other.redCardTime);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'playerName' field.
      * @return The value.
      */
    public java.lang.String getPlayerName() {
      return playerName;
    }


    /**
      * Sets the value of the 'playerName' field.
      * @param value The value of 'playerName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setPlayerName(java.lang.String value) {
      validate(fields()[0], value);
      this.playerName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'playerName' field has been set.
      * @return True if the 'playerName' field has been set, false otherwise.
      */
    public boolean hasPlayerName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'playerName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearPlayerName() {
      playerName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'playerId' field.
      * @return The value.
      */
    public java.lang.String getPlayerId() {
      return playerId;
    }


    /**
      * Sets the value of the 'playerId' field.
      * @param value The value of 'playerId'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setPlayerId(java.lang.String value) {
      validate(fields()[1], value);
      this.playerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'playerId' field has been set.
      * @return True if the 'playerId' field has been set, false otherwise.
      */
    public boolean hasPlayerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'playerId' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearPlayerId() {
      playerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'goalCount' field.
      * @return The value.
      */
    public int getGoalCount() {
      return goalCount;
    }


    /**
      * Sets the value of the 'goalCount' field.
      * @param value The value of 'goalCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setGoalCount(int value) {
      validate(fields()[2], value);
      this.goalCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'goalCount' field has been set.
      * @return True if the 'goalCount' field has been set, false otherwise.
      */
    public boolean hasGoalCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'goalCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearGoalCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assistCount' field.
      * @return The value.
      */
    public int getAssistCount() {
      return assistCount;
    }


    /**
      * Sets the value of the 'assistCount' field.
      * @param value The value of 'assistCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setAssistCount(int value) {
      validate(fields()[3], value);
      this.assistCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assistCount' field has been set.
      * @return True if the 'assistCount' field has been set, false otherwise.
      */
    public boolean hasAssistCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assistCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearAssistCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'keypass' field.
      * @return The value.
      */
    public int getKeypass() {
      return keypass;
    }


    /**
      * Sets the value of the 'keypass' field.
      * @param value The value of 'keypass'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setKeypass(int value) {
      validate(fields()[4], value);
      this.keypass = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'keypass' field has been set.
      * @return True if the 'keypass' field has been set, false otherwise.
      */
    public boolean hasKeypass() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'keypass' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearKeypass() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dribble' field.
      * @return The value.
      */
    public int getDribble() {
      return dribble;
    }


    /**
      * Sets the value of the 'dribble' field.
      * @param value The value of 'dribble'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setDribble(int value) {
      validate(fields()[5], value);
      this.dribble = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dribble' field has been set.
      * @return True if the 'dribble' field has been set, false otherwise.
      */
    public boolean hasDribble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dribble' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearDribble() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tackle' field.
      * @return The value.
      */
    public int getTackle() {
      return tackle;
    }


    /**
      * Sets the value of the 'tackle' field.
      * @param value The value of 'tackle'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setTackle(int value) {
      validate(fields()[6], value);
      this.tackle = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tackle' field has been set.
      * @return True if the 'tackle' field has been set, false otherwise.
      */
    public boolean hasTackle() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tackle' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearTackle() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'teamName' field.
      * @return The value.
      */
    public java.lang.String getTeamName() {
      return teamName;
    }


    /**
      * Sets the value of the 'teamName' field.
      * @param value The value of 'teamName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setTeamName(java.lang.String value) {
      validate(fields()[7], value);
      this.teamName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'teamName' field has been set.
      * @return True if the 'teamName' field has been set, false otherwise.
      */
    public boolean hasTeamName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'teamName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearTeamName() {
      teamName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'inTime' field.
      * @return The value.
      */
    public java.lang.String getInTime() {
      return inTime;
    }


    /**
      * Sets the value of the 'inTime' field.
      * @param value The value of 'inTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setInTime(java.lang.String value) {
      validate(fields()[8], value);
      this.inTime = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'inTime' field has been set.
      * @return True if the 'inTime' field has been set, false otherwise.
      */
    public boolean hasInTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'inTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearInTime() {
      inTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'outTime' field.
      * @return The value.
      */
    public java.lang.String getOutTime() {
      return outTime;
    }


    /**
      * Sets the value of the 'outTime' field.
      * @param value The value of 'outTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setOutTime(java.lang.String value) {
      validate(fields()[9], value);
      this.outTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'outTime' field has been set.
      * @return True if the 'outTime' field has been set, false otherwise.
      */
    public boolean hasOutTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'outTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearOutTime() {
      outTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'yellowCardTime' field.
      * @return The value.
      */
    public java.lang.String getYellowCardTime() {
      return yellowCardTime;
    }


    /**
      * Sets the value of the 'yellowCardTime' field.
      * @param value The value of 'yellowCardTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setYellowCardTime(java.lang.String value) {
      validate(fields()[10], value);
      this.yellowCardTime = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'yellowCardTime' field has been set.
      * @return True if the 'yellowCardTime' field has been set, false otherwise.
      */
    public boolean hasYellowCardTime() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'yellowCardTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearYellowCardTime() {
      yellowCardTime = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondYellowCardTime' field.
      * @return The value.
      */
    public java.lang.String getSecondYellowCardTime() {
      return secondYellowCardTime;
    }


    /**
      * Sets the value of the 'secondYellowCardTime' field.
      * @param value The value of 'secondYellowCardTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setSecondYellowCardTime(java.lang.String value) {
      validate(fields()[11], value);
      this.secondYellowCardTime = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'secondYellowCardTime' field has been set.
      * @return True if the 'secondYellowCardTime' field has been set, false otherwise.
      */
    public boolean hasSecondYellowCardTime() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'secondYellowCardTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearSecondYellowCardTime() {
      secondYellowCardTime = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'redCardTime' field.
      * @return The value.
      */
    public java.lang.String getRedCardTime() {
      return redCardTime;
    }


    /**
      * Sets the value of the 'redCardTime' field.
      * @param value The value of 'redCardTime'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder setRedCardTime(java.lang.String value) {
      validate(fields()[12], value);
      this.redCardTime = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'redCardTime' field has been set.
      * @return True if the 'redCardTime' field has been set, false otherwise.
      */
    public boolean hasRedCardTime() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'redCardTime' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.Player.Builder clearRedCardTime() {
      redCardTime = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Player build() {
      try {
        Player record = new Player();
        record.playerName = fieldSetFlags()[0] ? this.playerName : (java.lang.String) defaultValue(fields()[0]);
        record.playerId = fieldSetFlags()[1] ? this.playerId : (java.lang.String) defaultValue(fields()[1]);
        record.goalCount = fieldSetFlags()[2] ? this.goalCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.assistCount = fieldSetFlags()[3] ? this.assistCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.keypass = fieldSetFlags()[4] ? this.keypass : (java.lang.Integer) defaultValue(fields()[4]);
        record.dribble = fieldSetFlags()[5] ? this.dribble : (java.lang.Integer) defaultValue(fields()[5]);
        record.tackle = fieldSetFlags()[6] ? this.tackle : (java.lang.Integer) defaultValue(fields()[6]);
        record.teamName = fieldSetFlags()[7] ? this.teamName : (java.lang.String) defaultValue(fields()[7]);
        record.inTime = fieldSetFlags()[8] ? this.inTime : (java.lang.String) defaultValue(fields()[8]);
        record.outTime = fieldSetFlags()[9] ? this.outTime : (java.lang.String) defaultValue(fields()[9]);
        record.yellowCardTime = fieldSetFlags()[10] ? this.yellowCardTime : (java.lang.String) defaultValue(fields()[10]);
        record.secondYellowCardTime = fieldSetFlags()[11] ? this.secondYellowCardTime : (java.lang.String) defaultValue(fields()[11]);
        record.redCardTime = fieldSetFlags()[12] ? this.redCardTime : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Player>
    WRITER$ = (org.apache.avro.io.DatumWriter<Player>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Player>
    READER$ = (org.apache.avro.io.DatumReader<Player>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.playerName);

    out.writeString(this.playerId);

    out.writeInt(this.goalCount);

    out.writeInt(this.assistCount);

    out.writeInt(this.keypass);

    out.writeInt(this.dribble);

    out.writeInt(this.tackle);

    out.writeString(this.teamName);

    if (this.inTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.inTime);
    }

    if (this.outTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.outTime);
    }

    if (this.yellowCardTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.yellowCardTime);
    }

    if (this.secondYellowCardTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.secondYellowCardTime);
    }

    if (this.redCardTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.redCardTime);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.playerName = in.readString();

      this.playerId = in.readString();

      this.goalCount = in.readInt();

      this.assistCount = in.readInt();

      this.keypass = in.readInt();

      this.dribble = in.readInt();

      this.tackle = in.readInt();

      this.teamName = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.inTime = null;
      } else {
        this.inTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.outTime = null;
      } else {
        this.outTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.yellowCardTime = null;
      } else {
        this.yellowCardTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.secondYellowCardTime = null;
      } else {
        this.secondYellowCardTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.redCardTime = null;
      } else {
        this.redCardTime = in.readString();
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.playerName = in.readString();
          break;

        case 1:
          this.playerId = in.readString();
          break;

        case 2:
          this.goalCount = in.readInt();
          break;

        case 3:
          this.assistCount = in.readInt();
          break;

        case 4:
          this.keypass = in.readInt();
          break;

        case 5:
          this.dribble = in.readInt();
          break;

        case 6:
          this.tackle = in.readInt();
          break;

        case 7:
          this.teamName = in.readString();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.inTime = null;
          } else {
            this.inTime = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.outTime = null;
          } else {
            this.outTime = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.yellowCardTime = null;
          } else {
            this.yellowCardTime = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.secondYellowCardTime = null;
          } else {
            this.secondYellowCardTime = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.redCardTime = null;
          } else {
            this.redCardTime = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










